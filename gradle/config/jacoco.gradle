apply plugin: 'jacoco'

jacoco {
    toolVersion "0.7.6.201602180812"
//    toolVersion = "0.7.4.201502262128"
}
// run ./gradlew clean createDebugCoverageReport jacocoTestReport

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      'android/**/*.*',
                      '**/*Builder.*',
                      '**/*_MembersInjector.class',  // Dagger2 generated code
                      '**/*_MembersInjector*.*',  // Dagger2 generated code
                      '**/*_*Factory*.*', // Dagger2 generated code
                      '**/*Component*.*', // Dagger2 generated code
                      '**/*Module*.*', // Dagger2 generated code
                      '**/*Parcelable*.class', // Parcel generated code
                      '**/*Parcelable*.*', // Parcel generated code
					  '**/model/domain/*.*', // Room generated code
					  '**/model/data/*.*', // Model without logic
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree], [kotlinDebugTree])
    executionData = fileTree(dir: project.projectDir, includes:
            ['**/*.exec' , '**/*.ec'])
}